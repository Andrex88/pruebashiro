[main]
authc.loginUrl = /login.jsp
authc.successUrl = /home.jsp

ds = org.apache.commons.dbcp.BasicDataSource 
    ds.driverClassName = org.postgresql.Driver 
    ds.username = postgres 
    ds.password = 274061
    ds.url = jdbc:postgresql://localhost:4321/pruebashiro
    ds.maxActive = 10 


# Next, configure Shiro to use that to extract credentials
jdbcRealm             = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = select user_password from app.sec_users where user_loginname = ?
jdbcRealm.userRolesQuery      = select role_name from app.sec_roles where user_loginname = ?
jdbcRealm.permissionsQuery    = select permission_name from app.sec_permissions where role_name = ?
jdbcRealm.dataSource = $ds 

[users]
;# format: username = password, role1, role2, ..., roleN
;roman = contrase√±a,admin
;supervisor = 5432,supervisor
;cristian = 1234,lector

[roles]
;# format: roleName = permission1, permission2, ..., permissionN
;admin = *
;supervisor = autorizar,guardar
;lector = leer, escribir

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login.jsp = authc
/logout = logout
/account/* = roles[admin,supervisor]
/remoting/* = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]